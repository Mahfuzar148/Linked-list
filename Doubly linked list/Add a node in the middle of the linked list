/** Doubly linked list */

#include<bits/stdc++.h>
using namespace std;
struct node{
    struct node* prev;
    int data;
    struct node* next;
};
struct node* Create_node(int data)
{
    struct node* tmp = (struct node*)malloc(sizeof(struct node));
    tmp->prev = NULL;
    tmp->data = data;
    tmp->next = NULL;
    return tmp;
}

struct node* addToEmpty(struct node* head, int data)
{
    struct node* tmp =(struct node*) malloc(sizeof(struct node));
    tmp->prev = NULL;
    tmp->data = data;
    tmp->next = NULL;
    head = tmp;
    return head;
}

struct node* Add_node_begin(struct node* head,int data)
{
    struct node* tmp = (struct node*)malloc(sizeof(struct node));
    tmp = Create_node(data);
    tmp->next = head;
    head->prev = tmp;
    head = tmp;
    return head;

}
struct node* Add_at_last(struct node* head,int data)
{
    struct node* tmp = (struct node*)malloc(sizeof(struct node));
    struct node* tmp1 = (struct node*)malloc(sizeof(struct node));
    tmp1 = Create_node(data);

    tmp = head;
    while(tmp->next!=NULL)
    {
        tmp = tmp->next;
    }
    tmp->next=tmp1;
    tmp1->prev = tmp;

    return head;
}
void print(struct node* head)
{
    struct node* tmp = (struct node*)malloc(sizeof(struct node));
    tmp = head;
    while(tmp!=NULL)
    {
        cout<<tmp->data<<" ";
        tmp = tmp->next;
    }
    cout<<endl;
}
/**struct node* Add_middle(struct node* head,int data)
{
    struct node* newp = Create_node(data);
    struct node* tmp2 ;
    struct node* tmp = head;
    while(tmp->data!=45)
    {
        tmp = tmp->next;
        tmp2 = tmp;
    }
    tmp = tmp->next;
    newp->next = tmp;
    newp->prev = tmp2;
    tmp->next = newp;
    tmp2->prev = newp;
    return head;
}*/
struct node* Add_middle(struct node* head, int data)
{
    struct node* newp = Create_node(data);
    struct node* tmp = head;
    struct node* tmp2 = NULL;

    while (tmp != NULL && tmp->data != 45) {
        tmp2 = tmp;
        tmp = tmp->next;
    }
    cout<<tmp2->data<<endl;

    if (tmp == NULL) {
        // Node with data 45 not found
        free(newp);
        return head;
    }

    newp->next = tmp->next;
    newp->prev = tmp;
    if (tmp->next != NULL) {
        tmp->next->prev = newp;
    }
    tmp->next = newp;

    return head;
}


int main()
{
    struct node* head = NULL;
    head = addToEmpty(head,45);
    head = Add_node_begin(head,55);
    head = Add_at_last(head,60);
    Add_middle(head,89);
    //print(head);

    return 0;
}
